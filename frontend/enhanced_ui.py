#!/usr/bin/env python3
"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Streamlit UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
- –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
- –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import requests
import asyncio
import time
from datetime import datetime, timedelta
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
ROOT = Path(__file__).resolve().parent.parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from AI.news.enhanced_news import EnhancedNewsManager
    from AI.models.enhanced_model import create_enhanced_model, ModelConfig
    from AI.features.indicators import compute_indicators, compute_indicators_extended
    from AI.data.generate_synthetic import generate_ohlcv
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Crypto AI Analytics",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .news-card {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #e0e0e0;
        margin-bottom: 1rem;
    }
    .sentiment-positive { color: #28a745; }
    .sentiment-negative { color: #dc3545; }
    .sentiment-neutral { color: #6c757d; }
</style>
""", unsafe_allow_html=True)

class CryptoAnalyticsUI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    def __init__(self):
        self.api_url = os.environ.get("API_URL", "http://localhost:8000")
        self.news_manager = None
        self.model = None
        self.initialize_components()
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
            self.news_manager = EnhancedNewsManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            config = ModelConfig(
                price_features=8,
                news_features=64,
                indicator_features=26,
                d_model=256,
                nhead=8,
                num_layers=6,
                use_news=True,
                use_indicators=True
            )
            self.model = create_enhanced_model(config)
            
        except Exception as e:
            st.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {e}")
    
    def render_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        st.markdown('<h1 class="main-header">üöÄ Crypto AI Analytics</h1>', unsafe_allow_html=True)
        st.markdown("---")
    
    def render_sidebar(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å"""
        with st.sidebar:
            st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_symbol = st.selectbox(
                "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
                ["BTC", "ETH", "BNB", "ADA", "SOL", "DOT", "DOGE", "MATIC", "LTC", "XRP"],
                index=0
            )
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            timeframe = st.selectbox(
                "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                ["1m", "5m", "15m", "1h", "4h", "1d"],
                index=3
            )
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            num_candles = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π", 100, 1000, 500)
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            st.subheader("üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
            use_telegram = st.checkbox("Telegram", value=True)
            use_tradingview = st.checkbox("TradingView", value=True)
            use_investing = st.checkbox("Investing.com", value=True)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            st.subheader("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
            use_news_analysis = st.checkbox("–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π", value=True)
            use_technical_analysis = st.checkbox("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", value=True)
            ensemble_method = st.checkbox("Ensemble –º–µ—Ç–æ–¥—ã", value=True)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            st.subheader("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                st.session_state.refresh_data = True
            
            if st.button("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                st.session_state.generate_report = True
            
            return {
                "crypto_symbol": crypto_symbol,
                "timeframe": timeframe,
                "num_candles": num_candles,
                "use_telegram": use_telegram,
                "use_tradingview": use_tradingview,
                "use_investing": use_investing,
                "use_news_analysis": use_news_analysis,
                "use_technical_analysis": use_technical_analysis,
                "ensemble_method": ensemble_method
            }
    
    def render_price_chart(self, data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"""
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º candlestick –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure(data=[go.Candlestick(
            x=data['datetime'],
            open=data['open'],
            high=data['high'],
            low=data['low'],
            close=data['close'],
            name="OHLC"
        )])
        
        fig.update_layout(
            title=f"–¶–µ–Ω–∞ {st.session_state.get('crypto_symbol', 'BTC')}",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞ (USD)",
            height=500,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def render_technical_indicators(self, data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        st.subheader("üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df_with_indicators = compute_indicators_extended(data)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
            fig = make_subplots(
                rows=3, cols=2,
                subplot_titles=("RSI", "MACD", "Bollinger Bands", "Stochastic", "Volume", "MFI"),
                vertical_spacing=0.1
            )
            
            # RSI
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['rsi_14'], name="RSI"),
                row=1, col=1
            )
            fig.add_hline(y=70, line_dash="dash", line_color="red", row=1, col=1)
            fig.add_hline(y=30, line_dash="dash", line_color="green", row=1, col=1)
            
            # MACD
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['macd'], name="MACD"),
                row=1, col=2
            )
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['macd_signal'], name="Signal"),
                row=1, col=2
            )
            
            # Bollinger Bands
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['bb_high'], name="BB High", line=dict(color='gray')),
                row=2, col=1
            )
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['bb_low'], name="BB Low", line=dict(color='gray')),
                row=2, col=1
            )
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['close'], name="Price"),
                row=2, col=1
            )
            
            # Stochastic
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['stoch_k'], name="%K"),
                row=2, col=2
            )
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['stoch_d'], name="%D"),
                row=2, col=2
            )
            
            # Volume
            fig.add_trace(
                go.Bar(x=df_with_indicators.index, y=df_with_indicators['volume'], name="Volume"),
                row=3, col=1
            )
            
            # MFI
            fig.add_trace(
                go.Scatter(x=df_with_indicators.index, y=df_with_indicators['mfi_14'], name="MFI"),
                row=3, col=2
            )
            
            fig.update_layout(height=800, showlegend=True)
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
    
    def render_news_analysis(self, news_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        st.subheader("üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        if news_data.empty:
            st.info("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π", len(news_data))
        
        with col2:
            positive_news = len(news_data[news_data['sentiment_label'] == 'POSITIVE'])
            st.metric("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", positive_news)
        
        with col3:
            negative_news = len(news_data[news_data['sentiment_label'] == 'NEGATIVE'])
            st.metric("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", negative_news)
        
        with col4:
            avg_impact = news_data['impact_score'].mean()
            st.metric("–°—Ä–µ–¥–Ω–∏–π Impact", f"{avg_impact:.3f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        fig = px.histogram(
            news_data, 
            x='sentiment_score', 
            color='sentiment_label',
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π",
            labels={'sentiment_score': '–°–µ–Ω—Ç–∏–º–µ–Ω—Ç', 'sentiment_label': '–õ–µ–π–±–ª'}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
        
        for _, news in news_data.head(10).iterrows():
            sentiment_class = f"sentiment-{news['sentiment_label'].lower()}"
            
            with st.container():
                st.markdown(f"""
                <div class="news-card">
                    <h4>{news['title']}</h4>
                    <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {news['source']} | <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {news['category']}</p>
                    <p><strong>–°–µ–Ω—Ç–∏–º–µ–Ω—Ç:</strong> <span class="{sentiment_class}">{news['sentiment_label']} ({news['sentiment_score']:.3f})</span></p>
                    <p><strong>Impact:</strong> {news['impact_score']:.3f}</p>
                    <p><strong>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</strong> {news['crypto_mentions']}</p>
                    <small>{news['date']}</small>
                </div>
                """, unsafe_allow_html=True)
    
    def render_machine_learning(self, price_data: pd.DataFrame, news_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        st.subheader("ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            if len(price_data) < 100:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π.")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            price_features = price_data[['open', 'high', 'low', 'close', 'volume']].values
            price_features = np.concatenate([
                price_features,
                np.random.randn(len(price_features), 3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            ], axis=1)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                result = self.model.predict(price_features)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", result['prediction'])
                
                with col2:
                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result['confidence']:.3f}")
                
                with col3:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    if result['prediction'] == "UP":
                        color = "green"
                    elif result['prediction'] == "DOWN":
                        color = "red"
                    else:
                        color = "gray"
                    
                    st.markdown(f"""
                    <div style="background-color: {color}; color: white; padding: 1rem; border-radius: 0.5rem; text-align: center;">
                        <h3>{result['prediction']}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                fig = go.Figure(data=[
                    go.Bar(
                        x=['DOWN', 'NEUTRAL', 'UP'],
                        y=[result['probabilities']['down'], result['probabilities']['neutral'], result['probabilities']['up']],
                        marker_color=['red', 'gray', 'green']
                    )
                ])
                
                fig.update_layout(
                    title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
                    xaxis_title="–ö–ª–∞—Å—Å",
                    yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.subheader("üìä –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Ensemble –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:**")
                    for key, value in result['probabilities'].items():
                        st.write(f"- {key.upper()}: {value:.3f}")
                
                with col2:
                    st.write("**Transformer –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:**")
                    for key, value in result['transformer_probs'].items():
                        st.write(f"- {key.upper()}: {value:.3f}")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def render_market_analysis(self, price_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            returns = price_data['close'].pct_change().dropna()
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                volatility = returns.std() * np.sqrt(252)
                st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤–∞—è)", f"{volatility:.2%}")
            
            with col2:
                sharpe_ratio = returns.mean() / returns.std() * np.sqrt(252) if returns.std() > 0 else 0
                st.metric("Sharpe Ratio", f"{sharpe_ratio:.3f}")
            
            with col3:
                max_drawdown = (price_data['close'] / price_data['close'].cummax() - 1).min()
                st.metric("Max Drawdown", f"{max_drawdown:.2%}")
            
            with col4:
                current_price = price_data['close'].iloc[-1]
                price_change = (current_price / price_data['close'].iloc[0] - 1)
                st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã", f"{price_change:.2%}")
            
            # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            cumulative_returns = (1 + returns).cumprod()
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=cumulative_returns.index,
                y=cumulative_returns.values,
                mode='lines',
                name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'
            ))
            
            fig.update_layout(
                title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")
    
    def render_portfolio_optimization(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        st.subheader("üíº –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
        st.write("**–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            btc_allocation = st.slider("BTC Allocation (%)", 0, 100, 40)
            eth_allocation = st.slider("ETH Allocation (%)", 0, 100, 30)
            other_allocation = st.slider("Other Allocation (%)", 0, 100, 30)
        
        with col2:
            total_allocation = btc_allocation + eth_allocation + other_allocation
            
            if total_allocation != 100:
                st.warning(f"–û–±—â–∞—è –∞–ª–ª–æ–∫–∞—Ü–∏—è: {total_allocation}% (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%)")
            else:
                st.success("‚úÖ –ê–ª–ª–æ–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            btc_return = 0.15  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            eth_return = 0.20
            other_return = 0.10
            
            expected_return = (btc_allocation * btc_return + eth_allocation * eth_return + other_allocation * other_return) / 100
            
            st.metric("–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{expected_return:.2%}")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        fig = go.Figure(data=[go.Pie(
            labels=['BTC', 'ETH', 'Other'],
            values=[btc_allocation, eth_allocation, other_allocation],
            hole=0.3
        )])
        
        fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        st.plotly_chart(fig, use_container_width=True)
    
    def render_risk_management(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏"""
        st.subheader("‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏**")
            
            account_size = st.number_input("–†–∞–∑–º–µ—Ä —Å—á–µ—Ç–∞ (USD)", min_value=1000, value=10000, step=1000)
            risk_per_trade = st.slider("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)", 1, 5, 2)
            stop_loss = st.slider("Stop Loss (%)", 5, 20, 10)
            
            risk_amount = account_size * risk_per_trade / 100
            position_size = risk_amount / (stop_loss / 100)
            
            st.metric("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏", f"${position_size:.2f}")
            st.metric("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É", f"${risk_amount:.2f}")
        
        with col2:
            st.write("**–†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏**")
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            var_95 = 0.02  # Value at Risk 95%
            max_loss = 0.15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫
            recovery_time = 30  # –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –¥–Ω—è—Ö
            
            st.metric("VaR (95%)", f"{var_95:.2%}")
            st.metric("–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫", f"{max_loss:.2%}")
            st.metric("–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", f"{recovery_time} –¥–Ω–µ–π")
    
    def render_news_sentiment_timeline(self, news_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        st.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞")
        
        if news_data.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
            news_data['date'] = pd.to_datetime(news_data['date'])
            news_data['hour'] = news_data['date'].dt.hour
            
            hourly_sentiment = news_data.groupby('hour')['sentiment_score'].mean().reset_index()
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=hourly_sentiment['hour'],
                y=hourly_sentiment['sentiment_score'],
                mode='lines+markers',
                name='–°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç',
                line=dict(color='blue', width=2)
            ))
            
            fig.add_hline(y=0, line_dash="dash", line_color="gray")
            
            fig.update_layout(
                title="–°–µ–Ω—Ç–∏–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —á–∞—Å–∞–º",
                xaxis_title="–ß–∞—Å –¥–Ω—è",
                yaxis_title="–°–µ–Ω—Ç–∏–º–µ–Ω—Ç",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏: {e}")
    
    def render_correlation_analysis(self, price_data: pd.DataFrame, news_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        st.subheader("üîó –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–æ–º
            if not news_data.empty and len(price_data) >= len(news_data):
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ
                min_len = min(len(price_data), len(news_data))
                
                price_returns = price_data['close'].pct_change().dropna().iloc[-min_len:]
                news_sentiment = news_data['sentiment_score'].iloc[-min_len:]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                correlation = np.corrcoef(price_returns, news_sentiment)[0, 1]
                
                st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω–∞-—Å–µ–Ω—Ç–∏–º–µ–Ω—Ç", f"{correlation:.3f}")
                
                # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                fig = make_subplots(rows=2, cols=1, subplot_titles=("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã", "–°–µ–Ω—Ç–∏–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"))
                
                fig.add_trace(
                    go.Scatter(x=price_returns.index, y=price_returns.values, name="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã"),
                    row=1, col=1
                )
                
                fig.add_trace(
                    go.Scatter(x=news_sentiment.index, y=news_sentiment.values, name="–°–µ–Ω—Ç–∏–º–µ–Ω—Ç"),
                    row=2, col=1
                )
                
                fig.update_layout(height=600, showlegend=True)
                st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
    
    def render_export_section(self, price_data: pd.DataFrame, news_data: pd.DataFrame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                csv = price_data.to_csv(index=False)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"crypto_prices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        with col2:
            if not news_data.empty and st.button("üì∞ –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"):
                csv = news_data.to_csv(index=False)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"crypto_news_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º UI"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        if 'refresh_data' not in st.session_state:
            st.session_state.refresh_data = False
        if 'generate_report' not in st.session_state:
            st.session_state.generate_report = False
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.render_header()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        settings = self.render_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if st.session_state.refresh_data or st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.refresh_data = False
            
            with st.spinner("–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                price_data = generate_ohlcv(n=settings['num_candles'])
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                news_data = pd.DataFrame({
                    'id': range(20),
                    'source': np.random.choice(['telegram', 'tradingview', 'investing'], 20),
                    'title': [f"–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å {i}" for i in range(20)],
                    'sentiment_score': np.random.normal(0, 0.5, 20),
                    'sentiment_label': np.random.choice(['POSITIVE', 'NEGATIVE', 'NEUTRAL'], 20),
                    'category': np.random.choice(['regulation', 'adoption', 'technology', 'market'], 20),
                    'impact_score': np.random.uniform(0.1, 1.0, 20),
                    'crypto_mentions': ['BTC, ETH'] * 20,
                    'date': [datetime.now() - timedelta(hours=i) for i in range(20)]
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
                st.session_state.price_data = price_data
                st.session_state.news_data = news_data
                
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'price_data' in st.session_state and 'news_data' in st.session_state:
            price_data = st.session_state.price_data
            news_data = st.session_state.news_data
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
                "üìà –¶–µ–Ω–∞", "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "ü§ñ ML", 
                "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", "‚ö†Ô∏è –†–∏—Å–∫–∏"
            ])
            
            with tab1:
                self.render_price_chart(price_data)
            
            with tab2:
                self.render_technical_indicators(price_data)
            
            with tab3:
                self.render_news_analysis(news_data)
                self.render_news_sentiment_timeline(news_data)
                self.render_correlation_analysis(price_data, news_data)
            
            with tab4:
                self.render_machine_learning(price_data, news_data)
            
            with tab5:
                self.render_market_analysis(price_data)
            
            with tab6:
                self.render_portfolio_optimization()
            
            with tab7:
                self.render_risk_management()
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            self.render_export_section(price_data, news_data)
        
        else:
            st.info("üëÜ –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        ui = CryptoAnalyticsUI()
        ui.run()
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ API –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main()
